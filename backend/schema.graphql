type Query {
  users(name: String): [User!]
  signIn(name: String!, password: String!): SignInType
  posts(author: String): [Post!]
  dues(author: String!): [Due!]
  onemessageboxes(sender: String!): [Message!]
  votes(creator: String): [Vote!]
}

type Mutation {
  createUser(data: CreateUserInput!): SignUpType
  deleteUser(name: String!): User!
  updateUser(data: UpdateUserInput!): User!

  createPost(data: CreatePostInput!): Post!
  deletePost(_id: ID!, author: String!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(data: DeleteCommentInput!): Comment!

  createDue(data: CreateDueInput!): Due!
  deleteDue(_id: ID!, author: String!): Due!

  createOneMessage(sender: String!, body: String!): Message!
  deleteOneMessage(_id: ID!, sender: String!): Message!

  createVote(data: CreateVoteInput!): Vote!
  updateVote(data: CreateVoteInput!): Vote!
  deleteVote(_id: ID!, creator: String!): Vote!

  clearData(type: String): Boolean!
}

type Subscription {
  user: UserSubscriptionPayload!
  due(author: String!): DueSubscriptionPayload!
  onemessagebox(sender: String!): OnemessageboxSubscriptionPayload!
  post: PostSubscriptionPayload!
  vote: VoteSubscriptionPayload!
}

type User {
  name: String!
  password: String!
  phone: String!
  email: String!
}

type Friend{
  _id: ID!
  name: String!
  today: Int!
}

type Message {
  _id: ID!
  sender: Author!
  body: String!
}

type Due {
  _id: ID!
  due: String!
  body: String!
  author: Author!
}

type Post {
  _id: ID!
  time: String!
  body: String!
  author: Author!
  comments: [Comment!]
}

type Comment {
  _id: ID!
  post: Author!
  time: String!
  body: String!
  author: Author!
}

type Author {
  name: String!
}

type Vote {
  _id: ID!
  vote: String!
  creator: Author!
  count: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  data: User!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type DueSubscriptionPayload {
  mutation: MutationType!
  data: Due!
}

type OnemessageboxSubscriptionPayload {
  mutation: MutationType!
  data: Message!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  data: Vote!
}

input CreateUserInput {
  name: String!
  password: String!
  phone: String!
  email: String!
}

input UpdateUserInput {
  name: String!
  friends: [String!]
  mood: [Int!]
  today: Int!
}

input CreatePostInput {
  body: String!
  author: String!
}

input CreateDueInput {
  due: String!
  body: String!
  author: String!
}

input CreateCommentInput {
  postId: ID!
  postAuthor: String!
  body: String!
  author: String!
}

input DeleteCommentInput {
  type: Int!
  postId: Int!
  postAuthor:String!
  commentId: Int!
  author: String!
}

input CreateVoteInput {
  vote: String!
  creator: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
  ADDED_COMMENT
  DELETED_COMMENT
}

enum SignInType {
  SUCCESS # login success / sign up success
  USER_NOT_FOUND # login fail (user not found)
  USER_EXISTS # sign up fail
  NOT_MATCH # login fail: account and password don't match
}

enum SignUpType {
  SUCCESS # sign up success
  USER_EXISTS # sign up fail
}

